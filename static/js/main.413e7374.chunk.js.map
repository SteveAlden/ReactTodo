{"version":3,"sources":["Components/layout/Header.js","Components/TodoItem.js","Components/Todos.js","Components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","appbar","color","grey","Header","classes","className","AppBar","position","style","backgroundColor","Toolbar","toolbar","Typography","variant","TodoItem","getStyle","textDecoration","props","todo","completed","this","id","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","onChange","markComplete","bind","ListItemText","disableTypography","primary","ListItemSecondaryAction","IconButton","aria-label","onClick","delTodo","Component","Todos","todos","map","List","key","AddTodo","state","e","setState","target","value","onSubmit","preventDefault","addTodo","display","TextField","label","margin","fullWidth","autoComplete","inputProps","Input","required","App","uuid","v4","filter","newTodo","Container","maxWidth","Paper","padding","boxShadow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.413e7374.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  appbar: {\r\n    color: grey\r\n  }\r\n}));\r\n\r\nfunction Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <AppBar position=\"static\" className={classes.appbar}> */}\r\n      <AppBar\r\n        position='static'\r\n        className={classes.appbar}\r\n        style={{\r\n          backgroundColor: '#303030',\r\n          color: 'rgba(132.0, 201.0, 251.0, 1.0)'\r\n        }}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <AssignmentTurnedInIcon />\r\n          <Typography variant='h6' className={classes.title}>\r\n            Todo List\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      //background: 'f4f4f4',\r\n      textDecoration: this.props.todo.completed ? 'line-through' : 'none',\r\n      color: 'rgba(132.0, 201.0, 251.0, 1.0)'\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <ListItem role={undefined} dense button style={this.getStyle()}>\r\n        {/* <ListItem\r\n        role={undefined}\r\n        dense\r\n        button\r\n        style={{ color: 'rgba(132.0, 201.0, 251.0, 1.0)' }}\r\n      > */}\r\n        <ListItemIcon>\r\n          <Checkbox\r\n            edge='start'\r\n            color='default'\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n            style={{ color: 'rgba(132.0, 201.0, 251.0, 1.0)' }}\r\n          />\r\n        </ListItemIcon>\r\n        {/* <ListItemText secondary={title} /> */}\r\n        <ListItemText\r\n          disableTypography\r\n          primary={\r\n            // <Typography style={{ color: 'rgba(132.0, 201.0, 251.0, 1.0)' }}>\r\n            <Typography>{title}</Typography>\r\n          }\r\n        />\r\n        <ListItemSecondaryAction>\r\n          <IconButton\r\n            edge='end'\r\n            aria-label='delete'\r\n            onClick={this.props.delTodo.bind(this, id)}\r\n          >\r\n            <DeleteIcon style={{ color: 'rgba(132.0, 201.0, 251.0, 1.0)' }} />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired\r\n};\r\n\r\nconst btnStyle = {\r\n  padding: '5px 9px',\r\n  float: 'right'\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\nimport List from '@material-ui/core/List';\r\n// import './App.css';\r\n\r\nclass Todos extends Component {\r\n\r\n\r\n    render() {\r\n        //console.log(this.props.todos);\r\n        return this.props.todos.map((todo) => (\r\n            <List>\r\n                <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n            </List>\r\n\r\n        ));\r\n    }\r\n}\r\n\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n// import { tsExpressionWithTypeArguments } from '@babel/types';\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: ''\r\n  };\r\n\r\n  onChange = e => this.setState({ title: e.target.value });\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: '' });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n        <TextField\r\n          //   id='outlined-basic'\r\n          //   variant='outlined'\r\n          id='standard-full-width'\r\n          color='secondary'\r\n          label='What do you want to do...?'\r\n          style={{ margin: 8, color: 'rgba(132.0, 201.0, 251.0, 1.0)' }}\r\n          fullWidth\r\n          autoComplete='off'\r\n          inputProps={{ Input: { color: 'rgba(132.0, 201.0, 251.0, 1.0)' } }}\r\n          required\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n          variant='filled'\r\n        />\r\n\r\n        {/* <Fab color=\"primary\" aria-label=\"add\">\r\n                    <AddIcon />\r\n                </Fab> */}\r\n\r\n        {/* <input type=\"text\"\r\n                    style={{ flex: 20, padding: '5px' }}\r\n                    name=\"title\"\r\n                    placeholder=\"What do you want to do...?\"\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                /> */}\r\n        {/* <input type=\"submit\"\r\n                    value=\"submit\"\r\n                    className=\"btn\"\r\n                    style={{ flex: 1 }}\r\n                /> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from 'react';\nimport Header from './Components/layout/Header';\nimport './App.css';\nimport Todos from './Components/Todos';\nimport AddTodo from './Components/AddTodo';\nimport uuid from 'uuid';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid.v4(),\n        title: 'Play with space time',\n        completed: false\n      },\n      {\n        id: uuid.v4(),\n        title: 'Manipulate space time',\n        completed: false\n      },\n      {\n        id: uuid.v4(),\n        title: 'Mess with space time',\n        completed: false\n      }\n    ]\n  };\n\n  //Toggle completed\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  //Delete todo\n  delTodo = id => {\n    this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    });\n  };\n  addTodo = title => {\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    };\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  };\n\n  render() {\n    //console.log(this.state.todos);\n    return (\n      <div>\n        <Header />\n\n        <Container maxWidth='smx'>\n          <Paper\n            style={{\n              margin: '20px 2px 20px 2px',\n              backgroundColor: '#272727',\n              padding: '20px',\n              boxShadow:\n                '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\n            }}\n          >\n            <AddTodo addTodo={this.addTodo} />\n            <Todos\n              todos={this.state.todos}\n              markComplete={this.markComplete}\n              delTodo={this.delTodo}\n            />\n          </Paper>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}